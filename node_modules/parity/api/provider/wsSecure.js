'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _transport = require('../transport');function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var

WsSecure = function (_Transport) {_inherits(WsSecure, _Transport);function WsSecure() {var _ref;var _temp, _this, _ret;_classCallCheck(this, WsSecure);for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = WsSecure.__proto__ || Object.getPrototypeOf(WsSecure)).call.apply(_ref, [this].concat(args))), _this), _this.
    send = function (method, params, callback) {
      _this.
      _execute(method, params).
      then(function (result) {return callback(null, result);}).
      catch(function (error) {return callback(error);});
    }, _temp), _possibleConstructorReturn(_this, _ret);}return WsSecure;}(_transport.WsSecure);exports.default = WsSecure;module.exports = exports['default'];