"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var e_1, _a;
var revert_error_1 = require("../../revert_error");
// tslint:disable:max-classes-per-file
var BinOpErrorCodes;
(function (BinOpErrorCodes) {
    BinOpErrorCodes[BinOpErrorCodes["AdditionOverflow"] = 0] = "AdditionOverflow";
    BinOpErrorCodes[BinOpErrorCodes["MultiplicationOverflow"] = 1] = "MultiplicationOverflow";
    BinOpErrorCodes[BinOpErrorCodes["SubtractionUnderflow"] = 2] = "SubtractionUnderflow";
    BinOpErrorCodes[BinOpErrorCodes["DivisionByZero"] = 3] = "DivisionByZero";
})(BinOpErrorCodes = exports.BinOpErrorCodes || (exports.BinOpErrorCodes = {}));
var DowncastErrorCodes;
(function (DowncastErrorCodes) {
    DowncastErrorCodes[DowncastErrorCodes["ValueTooLargeToDowncastToUint32"] = 0] = "ValueTooLargeToDowncastToUint32";
    DowncastErrorCodes[DowncastErrorCodes["ValueTooLargeToDowncastToUint64"] = 1] = "ValueTooLargeToDowncastToUint64";
    DowncastErrorCodes[DowncastErrorCodes["ValueTooLargeToDowncastToUint96"] = 2] = "ValueTooLargeToDowncastToUint96";
})(DowncastErrorCodes = exports.DowncastErrorCodes || (exports.DowncastErrorCodes = {}));
var Uint256BinOpError = /** @class */ (function (_super) {
    __extends(Uint256BinOpError, _super);
    function Uint256BinOpError(error, a, b) {
        return _super.call(this, 'Uint256BinOpError', 'Uint256BinOpError(uint8 error, uint256 a, uint256 b)', {
            error: error,
            a: a,
            b: b,
        }) || this;
    }
    return Uint256BinOpError;
}(revert_error_1.RevertError));
exports.Uint256BinOpError = Uint256BinOpError;
var Uint96BinOpError = /** @class */ (function (_super) {
    __extends(Uint96BinOpError, _super);
    function Uint96BinOpError(error, a, b) {
        return _super.call(this, 'Uint96BinOpError', 'Uint96BinOpError(uint8 error, uint96 a, uint96 b)', {
            error: error,
            a: a,
            b: b,
        }) || this;
    }
    return Uint96BinOpError;
}(revert_error_1.RevertError));
exports.Uint96BinOpError = Uint96BinOpError;
var Uint64BinOpError = /** @class */ (function (_super) {
    __extends(Uint64BinOpError, _super);
    function Uint64BinOpError(error, a, b) {
        return _super.call(this, 'Uint64BinOpError', 'Uint64BinOpError(uint8 error, uint64 a, uint64 b)', {
            error: error,
            a: a,
            b: b,
        }) || this;
    }
    return Uint64BinOpError;
}(revert_error_1.RevertError));
exports.Uint64BinOpError = Uint64BinOpError;
var Uint256DowncastError = /** @class */ (function (_super) {
    __extends(Uint256DowncastError, _super);
    function Uint256DowncastError(error, a) {
        return _super.call(this, 'Uint256DowncastError', 'Uint256DowncastError(uint8 error, uint256 a)', {
            error: error,
            a: a,
        }) || this;
    }
    return Uint256DowncastError;
}(revert_error_1.RevertError));
exports.Uint256DowncastError = Uint256DowncastError;
var types = [Uint256BinOpError, Uint96BinOpError, Uint64BinOpError, Uint256DowncastError];
try {
    // Register the types we've defined.
    for (var types_1 = __values(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {
        var type = types_1_1.value;
        revert_error_1.RevertError.registerType(type);
    }
}
catch (e_1_1) { e_1 = { error: e_1_1 }; }
finally {
    try {
        if (types_1_1 && !types_1_1.done && (_a = types_1.return)) _a.call(types_1);
    }
    finally { if (e_1) throw e_1.error; }
}
//# sourceMappingURL=safe_math_revert_errors.js.map