"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var e_1, _a;
var revert_error_1 = require("../../revert_error");
// tslint:disable:max-classes-per-file
var OnlyOwnerError = /** @class */ (function (_super) {
    __extends(OnlyOwnerError, _super);
    function OnlyOwnerError(sender, owner) {
        return _super.call(this, 'OnlyOwnerError', 'OnlyOwnerError(address sender, address owner)', {
            sender: sender,
            owner: owner,
        }) || this;
    }
    return OnlyOwnerError;
}(revert_error_1.RevertError));
exports.OnlyOwnerError = OnlyOwnerError;
var TransferOwnerToZeroError = /** @class */ (function (_super) {
    __extends(TransferOwnerToZeroError, _super);
    function TransferOwnerToZeroError() {
        return _super.call(this, 'TransferOwnerToZeroError', 'TransferOwnerToZeroError()', {}) || this;
    }
    return TransferOwnerToZeroError;
}(revert_error_1.RevertError));
exports.TransferOwnerToZeroError = TransferOwnerToZeroError;
var types = [OnlyOwnerError, TransferOwnerToZeroError];
try {
    // Register the types we've defined.
    for (var types_1 = __values(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {
        var type = types_1_1.value;
        revert_error_1.RevertError.registerType(type);
    }
}
catch (e_1_1) { e_1 = { error: e_1_1 }; }
finally {
    try {
        if (types_1_1 && !types_1_1.done && (_a = types_1.return)) _a.call(types_1);
    }
    finally { if (e_1) throw e_1.error; }
}
//# sourceMappingURL=ownable_revert_errors.js.map