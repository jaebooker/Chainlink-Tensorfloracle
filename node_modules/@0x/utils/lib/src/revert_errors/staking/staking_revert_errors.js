"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var e_1, _a;
var revert_error_1 = require("../../revert_error");
// tslint:disable:max-classes-per-file
var MakerPoolAssignmentErrorCodes;
(function (MakerPoolAssignmentErrorCodes) {
    MakerPoolAssignmentErrorCodes[MakerPoolAssignmentErrorCodes["MakerAddressAlreadyRegistered"] = 0] = "MakerAddressAlreadyRegistered";
    MakerPoolAssignmentErrorCodes[MakerPoolAssignmentErrorCodes["MakerAddressNotRegistered"] = 1] = "MakerAddressNotRegistered";
    MakerPoolAssignmentErrorCodes[MakerPoolAssignmentErrorCodes["MakerAddressNotPendingAdd"] = 2] = "MakerAddressNotPendingAdd";
    MakerPoolAssignmentErrorCodes[MakerPoolAssignmentErrorCodes["PoolIsFull"] = 3] = "PoolIsFull";
})(MakerPoolAssignmentErrorCodes = exports.MakerPoolAssignmentErrorCodes || (exports.MakerPoolAssignmentErrorCodes = {}));
var OperatorShareErrorCodes;
(function (OperatorShareErrorCodes) {
    OperatorShareErrorCodes[OperatorShareErrorCodes["OperatorShareTooLarge"] = 0] = "OperatorShareTooLarge";
    OperatorShareErrorCodes[OperatorShareErrorCodes["CanOnlyDecreaseOperatorShare"] = 1] = "CanOnlyDecreaseOperatorShare";
})(OperatorShareErrorCodes = exports.OperatorShareErrorCodes || (exports.OperatorShareErrorCodes = {}));
var InvalidParamValueErrorCodes;
(function (InvalidParamValueErrorCodes) {
    InvalidParamValueErrorCodes[InvalidParamValueErrorCodes["InvalidCobbDouglasAlpha"] = 0] = "InvalidCobbDouglasAlpha";
    InvalidParamValueErrorCodes[InvalidParamValueErrorCodes["InvalidRewardDelegatedStakeWeight"] = 1] = "InvalidRewardDelegatedStakeWeight";
    InvalidParamValueErrorCodes[InvalidParamValueErrorCodes["InvalidMaximumMakersInPool"] = 2] = "InvalidMaximumMakersInPool";
    InvalidParamValueErrorCodes[InvalidParamValueErrorCodes["InvalidMinimumPoolStake"] = 3] = "InvalidMinimumPoolStake";
    InvalidParamValueErrorCodes[InvalidParamValueErrorCodes["InvalidEpochDuration"] = 4] = "InvalidEpochDuration";
})(InvalidParamValueErrorCodes = exports.InvalidParamValueErrorCodes || (exports.InvalidParamValueErrorCodes = {}));
var InitializationErrorCodes;
(function (InitializationErrorCodes) {
    InitializationErrorCodes[InitializationErrorCodes["MixinSchedulerAlreadyInitialized"] = 0] = "MixinSchedulerAlreadyInitialized";
    InitializationErrorCodes[InitializationErrorCodes["MixinParamsAlreadyInitialized"] = 1] = "MixinParamsAlreadyInitialized";
})(InitializationErrorCodes = exports.InitializationErrorCodes || (exports.InitializationErrorCodes = {}));
var ExchangeManagerErrorCodes;
(function (ExchangeManagerErrorCodes) {
    ExchangeManagerErrorCodes[ExchangeManagerErrorCodes["ExchangeAlreadyRegistered"] = 0] = "ExchangeAlreadyRegistered";
    ExchangeManagerErrorCodes[ExchangeManagerErrorCodes["ExchangeNotRegistered"] = 1] = "ExchangeNotRegistered";
})(ExchangeManagerErrorCodes = exports.ExchangeManagerErrorCodes || (exports.ExchangeManagerErrorCodes = {}));
var OnlyCallableByExchangeError = /** @class */ (function (_super) {
    __extends(OnlyCallableByExchangeError, _super);
    function OnlyCallableByExchangeError(senderAddress) {
        return _super.call(this, 'OnlyCallableByExchangeError', 'OnlyCallableByExchangeError(address senderAddress)', { senderAddress: senderAddress }) || this;
    }
    return OnlyCallableByExchangeError;
}(revert_error_1.RevertError));
exports.OnlyCallableByExchangeError = OnlyCallableByExchangeError;
var ExchangeManagerError = /** @class */ (function (_super) {
    __extends(ExchangeManagerError, _super);
    function ExchangeManagerError(error, senderAddress) {
        return _super.call(this, 'ExchangeManagerError', 'ExchangeManagerError(uint8 errorCode, address senderAddress)', {
            error: error,
            senderAddress: senderAddress,
        }) || this;
    }
    return ExchangeManagerError;
}(revert_error_1.RevertError));
exports.ExchangeManagerError = ExchangeManagerError;
var InsufficientBalanceError = /** @class */ (function (_super) {
    __extends(InsufficientBalanceError, _super);
    function InsufficientBalanceError(amount, balance) {
        return _super.call(this, 'InsufficientBalanceError', 'InsufficientBalanceError(uint256 amount, uint256 balance)', {
            amount: amount,
            balance: balance,
        }) || this;
    }
    return InsufficientBalanceError;
}(revert_error_1.RevertError));
exports.InsufficientBalanceError = InsufficientBalanceError;
var OnlyCallableByPoolOperatorError = /** @class */ (function (_super) {
    __extends(OnlyCallableByPoolOperatorError, _super);
    function OnlyCallableByPoolOperatorError(senderAddress, poolId) {
        return _super.call(this, 'OnlyCallableByPoolOperatorError', 'OnlyCallableByPoolOperatorError(address senderAddress, bytes32 poolId)', { senderAddress: senderAddress, poolId: poolId }) || this;
    }
    return OnlyCallableByPoolOperatorError;
}(revert_error_1.RevertError));
exports.OnlyCallableByPoolOperatorError = OnlyCallableByPoolOperatorError;
var MakerPoolAssignmentError = /** @class */ (function (_super) {
    __extends(MakerPoolAssignmentError, _super);
    function MakerPoolAssignmentError(error, makerAddress, poolId) {
        return _super.call(this, 'MakerPoolAssignmentError', 'MakerPoolAssignmentError(uint8 error, address makerAddress, bytes32 poolId)', {
            error: error,
            makerAddress: makerAddress,
            poolId: poolId,
        }) || this;
    }
    return MakerPoolAssignmentError;
}(revert_error_1.RevertError));
exports.MakerPoolAssignmentError = MakerPoolAssignmentError;
var BlockTimestampTooLowError = /** @class */ (function (_super) {
    __extends(BlockTimestampTooLowError, _super);
    function BlockTimestampTooLowError(epochEndTime, currentBlockTimestamp) {
        return _super.call(this, 'BlockTimestampTooLowError', 'BlockTimestampTooLowError(uint256 epochEndTime, uint256 currentBlockTimestamp)', { epochEndTime: epochEndTime, currentBlockTimestamp: currentBlockTimestamp }) || this;
    }
    return BlockTimestampTooLowError;
}(revert_error_1.RevertError));
exports.BlockTimestampTooLowError = BlockTimestampTooLowError;
var OnlyCallableByStakingContractError = /** @class */ (function (_super) {
    __extends(OnlyCallableByStakingContractError, _super);
    function OnlyCallableByStakingContractError(senderAddress) {
        return _super.call(this, 'OnlyCallableByStakingContractError', 'OnlyCallableByStakingContractError(address senderAddress)', {
            senderAddress: senderAddress,
        }) || this;
    }
    return OnlyCallableByStakingContractError;
}(revert_error_1.RevertError));
exports.OnlyCallableByStakingContractError = OnlyCallableByStakingContractError;
var OnlyCallableIfInCatastrophicFailureError = /** @class */ (function (_super) {
    __extends(OnlyCallableIfInCatastrophicFailureError, _super);
    function OnlyCallableIfInCatastrophicFailureError() {
        return _super.call(this, 'OnlyCallableIfInCatastrophicFailureError', 'OnlyCallableIfInCatastrophicFailureError()', {}) || this;
    }
    return OnlyCallableIfInCatastrophicFailureError;
}(revert_error_1.RevertError));
exports.OnlyCallableIfInCatastrophicFailureError = OnlyCallableIfInCatastrophicFailureError;
var OnlyCallableIfNotInCatastrophicFailureError = /** @class */ (function (_super) {
    __extends(OnlyCallableIfNotInCatastrophicFailureError, _super);
    function OnlyCallableIfNotInCatastrophicFailureError() {
        return _super.call(this, 'OnlyCallableIfNotInCatastrophicFailureError', 'OnlyCallableIfNotInCatastrophicFailureError()', {}) || this;
    }
    return OnlyCallableIfNotInCatastrophicFailureError;
}(revert_error_1.RevertError));
exports.OnlyCallableIfNotInCatastrophicFailureError = OnlyCallableIfNotInCatastrophicFailureError;
var OperatorShareError = /** @class */ (function (_super) {
    __extends(OperatorShareError, _super);
    function OperatorShareError(error, poolId, operatorShare) {
        return _super.call(this, 'OperatorShareError', 'OperatorShareError(uint8 error, bytes32 poolId, uint32 operatorShare)', {
            error: error,
            poolId: poolId,
            operatorShare: operatorShare,
        }) || this;
    }
    return OperatorShareError;
}(revert_error_1.RevertError));
exports.OperatorShareError = OperatorShareError;
var PoolExistenceError = /** @class */ (function (_super) {
    __extends(PoolExistenceError, _super);
    function PoolExistenceError(poolId, alreadyExists) {
        return _super.call(this, 'PoolExistenceError', 'PoolExistenceError(bytes32 poolId, bool alreadyExists)', {
            poolId: poolId,
            alreadyExists: alreadyExists,
        }) || this;
    }
    return PoolExistenceError;
}(revert_error_1.RevertError));
exports.PoolExistenceError = PoolExistenceError;
var InvalidParamValueError = /** @class */ (function (_super) {
    __extends(InvalidParamValueError, _super);
    function InvalidParamValueError(error) {
        return _super.call(this, 'InvalidParamValueError', 'InvalidParamValueError(uint8 error)', {
            error: error,
        }) || this;
    }
    return InvalidParamValueError;
}(revert_error_1.RevertError));
exports.InvalidParamValueError = InvalidParamValueError;
var InvalidProtocolFeePaymentError = /** @class */ (function (_super) {
    __extends(InvalidProtocolFeePaymentError, _super);
    function InvalidProtocolFeePaymentError(expectedProtocolFeePaid, actualProtocolFeePaid) {
        return _super.call(this, 'InvalidProtocolFeePaymentError', 'InvalidProtocolFeePaymentError(uint256 expectedProtocolFeePaid, uint256 actualProtocolFeePaid)', { expectedProtocolFeePaid: expectedProtocolFeePaid, actualProtocolFeePaid: actualProtocolFeePaid }) || this;
    }
    return InvalidProtocolFeePaymentError;
}(revert_error_1.RevertError));
exports.InvalidProtocolFeePaymentError = InvalidProtocolFeePaymentError;
var InitializationError = /** @class */ (function (_super) {
    __extends(InitializationError, _super);
    function InitializationError(error) {
        return _super.call(this, 'InitializationError', 'InitializationError(uint8 error)', { error: error }) || this;
    }
    return InitializationError;
}(revert_error_1.RevertError));
exports.InitializationError = InitializationError;
var ProxyDestinationCannotBeNilError = /** @class */ (function (_super) {
    __extends(ProxyDestinationCannotBeNilError, _super);
    function ProxyDestinationCannotBeNilError() {
        return _super.call(this, 'ProxyDestinationCannotBeNilError', 'ProxyDestinationCannotBeNilError()', {}) || this;
    }
    return ProxyDestinationCannotBeNilError;
}(revert_error_1.RevertError));
exports.ProxyDestinationCannotBeNilError = ProxyDestinationCannotBeNilError;
var PreviousEpochNotFinalizedError = /** @class */ (function (_super) {
    __extends(PreviousEpochNotFinalizedError, _super);
    function PreviousEpochNotFinalizedError(closingEpoch, unfinalizedPoolsRemaining) {
        return _super.call(this, 'PreviousEpochNotFinalizedError', 'PreviousEpochNotFinalizedError(uint256 closingEpoch, uint256 unfinalizedPoolsRemaining)', { closingEpoch: closingEpoch, unfinalizedPoolsRemaining: unfinalizedPoolsRemaining }) || this;
    }
    return PreviousEpochNotFinalizedError;
}(revert_error_1.RevertError));
exports.PreviousEpochNotFinalizedError = PreviousEpochNotFinalizedError;
var PoolNotFinalizedError = /** @class */ (function (_super) {
    __extends(PoolNotFinalizedError, _super);
    function PoolNotFinalizedError(poolId, epoch) {
        return _super.call(this, 'PoolNotFinalizedError', 'PoolNotFinalizedError(bytes32 poolId, uint256 epoch)', { poolId: poolId, epoch: epoch }) || this;
    }
    return PoolNotFinalizedError;
}(revert_error_1.RevertError));
exports.PoolNotFinalizedError = PoolNotFinalizedError;
var types = [
    BlockTimestampTooLowError,
    ExchangeManagerError,
    InitializationError,
    InsufficientBalanceError,
    InvalidProtocolFeePaymentError,
    InvalidParamValueError,
    MakerPoolAssignmentError,
    OnlyCallableByExchangeError,
    OnlyCallableByPoolOperatorError,
    OnlyCallableByStakingContractError,
    OnlyCallableIfInCatastrophicFailureError,
    OnlyCallableIfNotInCatastrophicFailureError,
    OperatorShareError,
    PoolExistenceError,
    PreviousEpochNotFinalizedError,
    ProxyDestinationCannotBeNilError,
    PoolNotFinalizedError,
];
try {
    // Register the types we've defined.
    for (var types_1 = __values(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {
        var type = types_1_1.value;
        revert_error_1.RevertError.registerType(type);
    }
}
catch (e_1_1) { e_1 = { error: e_1_1 }; }
finally {
    try {
        if (types_1_1 && !types_1_1.done && (_a = types_1.return)) _a.call(types_1);
    }
    finally { if (e_1) throw e_1.error; }
}
//# sourceMappingURL=staking_revert_errors.js.map