"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var e_1, _a;
var revert_error_1 = require("../../revert_error");
// tslint:disable:max-classes-per-file
var SignatureErrorCodes;
(function (SignatureErrorCodes) {
    SignatureErrorCodes[SignatureErrorCodes["InvalidLength"] = 0] = "InvalidLength";
    SignatureErrorCodes[SignatureErrorCodes["Unsupported"] = 1] = "Unsupported";
    SignatureErrorCodes[SignatureErrorCodes["Illegal"] = 2] = "Illegal";
    SignatureErrorCodes[SignatureErrorCodes["Invalid"] = 3] = "Invalid";
})(SignatureErrorCodes = exports.SignatureErrorCodes || (exports.SignatureErrorCodes = {}));
var SignatureError = /** @class */ (function (_super) {
    __extends(SignatureError, _super);
    function SignatureError(errorCode, hash, signature) {
        return _super.call(this, 'SignatureError', 'SignatureError(uint8 errorCode, bytes32 hash, bytes signature)', {
            errorCode: errorCode,
            hash: hash,
            signature: signature,
        }) || this;
    }
    return SignatureError;
}(revert_error_1.RevertError));
exports.SignatureError = SignatureError;
var InvalidOriginError = /** @class */ (function (_super) {
    __extends(InvalidOriginError, _super);
    function InvalidOriginError(expectedOrigin) {
        return _super.call(this, 'InvalidOriginError', 'InvalidOriginError(address expectedOrigin)', { expectedOrigin: expectedOrigin }) || this;
    }
    return InvalidOriginError;
}(revert_error_1.RevertError));
exports.InvalidOriginError = InvalidOriginError;
var ApprovalExpiredError = /** @class */ (function (_super) {
    __extends(ApprovalExpiredError, _super);
    function ApprovalExpiredError(transactionHash, approvalExpirationTime) {
        return _super.call(this, 'ApprovalExpiredError', 'ApprovalExpiredError(bytes32 transactionHash, uint256 approvalExpirationTime)', {
            transactionHash: transactionHash,
            approvalExpirationTime: approvalExpirationTime,
        }) || this;
    }
    return ApprovalExpiredError;
}(revert_error_1.RevertError));
exports.ApprovalExpiredError = ApprovalExpiredError;
var InvalidApprovalSignatureError = /** @class */ (function (_super) {
    __extends(InvalidApprovalSignatureError, _super);
    function InvalidApprovalSignatureError(transactionHash, approverAddress) {
        return _super.call(this, 'InvalidApprovalSignatureError', 'InvalidApprovalSignatureError(bytes32 transactionHash, address approverAddress)', { transactionHash: transactionHash, approverAddress: approverAddress }) || this;
    }
    return InvalidApprovalSignatureError;
}(revert_error_1.RevertError));
exports.InvalidApprovalSignatureError = InvalidApprovalSignatureError;
var types = [SignatureError, InvalidOriginError, ApprovalExpiredError, InvalidApprovalSignatureError];
try {
    // Register the types we've defined.
    for (var types_1 = __values(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {
        var type = types_1_1.value;
        revert_error_1.RevertError.registerType(type);
    }
}
catch (e_1_1) { e_1 = { error: e_1_1 }; }
finally {
    try {
        if (types_1_1 && !types_1_1.done && (_a = types_1.return)) _a.call(types_1);
    }
    finally { if (e_1) throw e_1.error; }
}
//# sourceMappingURL=revert_errors.js.map