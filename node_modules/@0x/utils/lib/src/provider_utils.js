"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
exports.providerUtils = {
    /**
     * Starts the Web3ProviderEngine without excess block polling
     * @param providerEngine The Web3ProviderEngine
     */
    startProviderEngine: function (providerEngine) {
        if (providerEngine.start === undefined) {
            throw new Error("Invalid Web3ProviderEngine");
        }
        // HACK: When calling start() Web3ProviderEngine starts a block polling service
        // this continuously pulls data from the network and can result in high data usage
        // for long running services. If used in a front end application this can cause
        // a high amount of load on a node (one request per user per block).
        providerEngine._ready.go();
        providerEngine._running = true;
    },
    /**
     * Standardize the supported provider types into our internal provider interface
     * or throw if unsupported provider supplied.
     * @param supportedProvider Potentially supported provider instance
     * @return Provider that conforms of our internal provider interface
     */
    standardizeOrThrow: function (supportedProvider) {
        if (supportedProvider === undefined) {
            throw new Error("supportedProvider cannot be 'undefined'");
        }
        var provider = {
            isStandardizedProvider: true,
            isMetaMask: supportedProvider.isMetaMask,
            isParity: supportedProvider.isParity,
            stop: supportedProvider.stop,
            enable: supportedProvider.enable,
            sendAsync: _.noop.bind(_),
        };
        if (provider.enable) {
            // Need to bind, metamask can lose reference to function without binding as of 7.7.0
            provider.enable.bind(supportedProvider);
        }
        // Case 1: We've already converted to our ZeroExProvider so noop.
        if (supportedProvider.isStandardizedProvider) {
            // tslint:disable-next-line:no-unnecessary-type-assertion
            return supportedProvider;
            // Case 2: It's a compliant EIP 1193 Provider
            // tslint:disable-next-line:no-unnecessary-type-assertion
        }
        else if (supportedProvider.isEIP1193) {
            provider.sendAsync = function (payload, callback) {
                var method = payload.method;
                var params = payload.params;
                supportedProvider
                    .send(method, params)
                    .then(function (result) {
                    callback(null, result);
                })
                    .catch(function (err) {
                    callback(err);
                });
            };
            return provider;
            // Case 3: The provider has a `sendAsync` method, so we use it.
        }
        else if (supportedProvider.sendAsync !== undefined) {
            provider.sendAsync = supportedProvider.sendAsync.bind(supportedProvider);
            return provider;
            // Case 4: The provider does not have a `sendAsync` method but does have a `send` method
        }
        else if (supportedProvider.send !== undefined) {
            // HACK(fabio): Detect if the `send` method has the old interface `send(payload, cb)` such
            // as in versions < Web3.js@1.0.0-beta.37. If so, do a simple re-mapping
            if (_.includes(supportedProvider.send.toString().replace(' ', ''), 'function(payload,callback)')) {
                provider.sendAsync = supportedProvider.send.bind(supportedProvider);
                return provider;
            }
            else {
                // If doesn't have old interface, we assume it has new interface `send(method, payload)`
                // such as in versions > Web3.js@1.0.0-beta.38 and convert it to `sendAsync`
                provider.sendAsync = function (payload, callback) {
                    var method = payload.method;
                    var params = payload.params;
                    supportedProvider
                        .send(method, params)
                        .then(function (result) {
                        callback(null, result);
                    })
                        .catch(function (err) {
                        callback(err);
                    });
                };
                return provider;
            }
        }
        throw new Error("Unsupported provider found. Please make sure it conforms to one of the supported providers. See 'Provider' type in 'ethereum-types' package.");
    },
    /**
     * Retrieve the chain ID from a supported provider.
     * @param supportedProvider A supported provider instance.
     * @return A promise that resolves to the chain ID of the network the provider
     * is connected to.
     */
    getChainIdAsync: function (supportedProvider) {
        return __awaiter(this, void 0, void 0, function () {
            var provider, RPC_ID_MAX;
            return __generator(this, function (_a) {
                provider = exports.providerUtils.standardizeOrThrow(supportedProvider);
                RPC_ID_MAX = Math.pow(2, 64);
                return [2 /*return*/, new Promise(function (accept, reject) {
                        provider.sendAsync({
                            jsonrpc: '2.0',
                            id: _.random(1, RPC_ID_MAX),
                            method: 'eth_chainId',
                            params: [],
                        }, function (err, result) {
                            if (!_.isNil(err)) {
                                reject(err);
                            }
                            if (!result) {
                                throw new Error("Invalid 'eth_chainId' response");
                            }
                            accept(_.toNumber(result.result));
                        });
                    })];
            });
        });
    },
};
//# sourceMappingURL=provider_utils.js.map