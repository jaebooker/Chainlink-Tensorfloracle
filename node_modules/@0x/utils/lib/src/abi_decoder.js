"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ethereum_types_1 = require("ethereum-types");
var ethers = require("ethers");
var _ = require("lodash");
var _1 = require(".");
/**
 * AbiDecoder allows you to decode event logs given a set of supplied contract ABI's. It takes the contract's event
 * signature from the ABI and attempts to decode the logs using it.
 */
var AbiDecoder = /** @class */ (function () {
    /**
     * Instantiate an AbiDecoder
     * @param abiArrays An array of contract ABI's
     * @return AbiDecoder instance
     */
    function AbiDecoder(abiArrays) {
        var _this = this;
        this._eventIds = {};
        this._selectorToFunctionInfo = {};
        _.each(abiArrays, function (abi) {
            _this.addABI(abi);
        });
    }
    /**
     * Retrieves the function selector from calldata.
     * @param calldata hex-encoded calldata.
     * @return hex-encoded function selector.
     */
    AbiDecoder._getFunctionSelector = function (calldata) {
        var functionSelectorLength = 10;
        if (!calldata.startsWith('0x') || calldata.length < functionSelectorLength) {
            throw new Error("Malformed calldata. Must include a hex prefix '0x' and 4-byte function selector. Got '" + calldata + "'");
        }
        var functionSelector = calldata.substr(0, functionSelectorLength);
        return functionSelector;
    };
    /**
     * Attempt to decode a log given the ABI's the AbiDecoder knows about.
     * @param log The log to attempt to decode
     * @return The decoded log if the requisite ABI was available. Otherwise the log unaltered.
     */
    AbiDecoder.prototype.tryToDecodeLogOrNoop = function (log) {
        var e_1, _a;
        // Lookup event corresponding to log
        var eventId = log.topics[0];
        var numIndexedArgs = log.topics.length - 1;
        if (this._eventIds[eventId] === undefined || this._eventIds[eventId][numIndexedArgs] === undefined) {
            return log;
        }
        var event = this._eventIds[eventId][numIndexedArgs];
        // Create decoders for indexed data
        var indexedDataDecoders = _.mapValues(_.filter(event.inputs, { indexed: true }), function (input) {
            // tslint:disable:next-line no-unnecessary-type-assertion
            return _1.AbiEncoder.create(input);
        });
        // Decode indexed data
        var decodedIndexedData = _.map(log.topics.slice(1), // ignore first topic, which is the event id.
        function (input, i) { return indexedDataDecoders[i].decode(input); });
        // Decode non-indexed data
        var decodedNonIndexedData = _1.AbiEncoder.create(_.filter(event.inputs, { indexed: false })).decodeAsArray(log.data);
        // Construct DecodedLogArgs struct by mapping event parameters to their respective decoded argument.
        var decodedArgs = {};
        var indexedOffset = 0;
        var nonIndexedOffset = 0;
        try {
            for (var _b = __values(event.inputs), _c = _b.next(); !_c.done; _c = _b.next()) {
                var param = _c.value;
                var value = param.indexed
                    ? decodedIndexedData[indexedOffset++]
                    : decodedNonIndexedData[nonIndexedOffset++];
                if (value === undefined) {
                    return log;
                }
                decodedArgs[param.name] = value;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // Decoding was successful. Return decoded log.
        return __assign({}, log, { event: event.name, args: decodedArgs });
    };
    /**
     * Decodes calldata for a known ABI.
     * @param calldata hex-encoded calldata.
     * @param contractName used to disambiguate similar ABI's (optional).
     * @return Decoded calldata. Includes: function name and signature, along with the decoded arguments.
     */
    AbiDecoder.prototype.decodeCalldataOrThrow = function (calldata, contractName) {
        var functionSelector = AbiDecoder._getFunctionSelector(calldata);
        var candidateFunctionInfos = this._selectorToFunctionInfo[functionSelector];
        if (candidateFunctionInfos === undefined) {
            throw new Error("No functions registered for selector '" + functionSelector + "'");
        }
        var functionInfo = _.find(candidateFunctionInfos, function (candidateFunctionInfo) {
            return (contractName === undefined || _.toLower(contractName) === _.toLower(candidateFunctionInfo.contractName));
        });
        if (functionInfo === undefined) {
            throw new Error("No function registered with selector " + functionSelector + " and contract name " + contractName + ".");
        }
        else if (functionInfo.abiEncoder === undefined) {
            throw new Error("Function ABI Encoder is not defined, for function registered with selector " + functionSelector + " and contract name " + contractName + ".");
        }
        var functionName = functionInfo.abiEncoder.getDataItem().name;
        var functionSignature = functionInfo.abiEncoder.getSignatureType();
        var functionArguments = functionInfo.abiEncoder.decode(calldata);
        var decodedCalldata = {
            functionName: functionName,
            functionSignature: functionSignature,
            functionArguments: functionArguments,
        };
        return decodedCalldata;
    };
    /**
     * Adds a set of ABI definitions, after which calldata and logs targeting these ABI's can be decoded.
     * Additional properties can be included to disambiguate similar ABI's. For example, if two functions
     * have the same signature but different parameter names, then their ABI definitions can be disambiguated
     * by specifying a contract name.
     * @param abiDefinitions ABI definitions for a given contract.
     * @param contractName Name of contract that encapsulates the ABI definitions (optional).
     *                     This can be used when decoding calldata to disambiguate methods with
     *                     the same signature but different parameter names.
     */
    AbiDecoder.prototype.addABI = function (abiArray, contractName) {
        var _this = this;
        if (abiArray === undefined) {
            return;
        }
        var ethersInterface = new ethers.utils.Interface(abiArray);
        _.map(abiArray, function (abi) {
            switch (abi.type) {
                case ethereum_types_1.AbiType.Event:
                    // tslint:disable-next-line:no-unnecessary-type-assertion
                    _this._addEventABI(abi, ethersInterface);
                    break;
                case ethereum_types_1.AbiType.Function:
                    // tslint:disable-next-line:no-unnecessary-type-assertion
                    _this._addMethodABI(abi, contractName);
                    break;
                default:
                    // ignore other types
                    break;
            }
        });
    };
    AbiDecoder.prototype._addEventABI = function (eventAbi, ethersInterface) {
        var _a;
        var topic = ethersInterface.events[eventAbi.name].topic;
        var numIndexedArgs = _.reduce(eventAbi.inputs, function (sum, input) { return (input.indexed ? sum + 1 : sum); }, 0);
        this._eventIds[topic] = __assign({}, this._eventIds[topic], (_a = {}, _a[numIndexedArgs] = eventAbi, _a));
    };
    AbiDecoder.prototype._addMethodABI = function (methodAbi, contractName) {
        var abiEncoder = new _1.AbiEncoder.Method(methodAbi);
        var functionSelector = abiEncoder.getSelector();
        if (!(functionSelector in this._selectorToFunctionInfo)) {
            this._selectorToFunctionInfo[functionSelector] = [];
        }
        // Recored a copy of this ABI for each deployment
        var functionSignature = abiEncoder.getSignature();
        this._selectorToFunctionInfo[functionSelector].push({
            functionSignature: functionSignature,
            abiEncoder: abiEncoder,
            contractName: contractName,
        });
    };
    return AbiDecoder;
}());
exports.AbiDecoder = AbiDecoder;
//# sourceMappingURL=abi_decoder.js.map