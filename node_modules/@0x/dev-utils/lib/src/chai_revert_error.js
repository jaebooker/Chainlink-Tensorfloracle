"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("@0x/utils");
function revertErrorHelper(_chai) {
    var proto = _chai.Assertion;
    proto.overwriteMethod('revertWith', function (_super) {
        return function (expected) {
            var rest = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                rest[_i - 1] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var maybePromise, resolveValue, rejectValue, didReject, err_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            maybePromise = this._obj;
                            // Make sure we're working with a promise.
                            assertIsPromiseLike(_chai, maybePromise);
                            didReject = false;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, maybePromise];
                        case 2:
                            resolveValue = _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            err_1 = _a.sent();
                            rejectValue = err_1;
                            didReject = true;
                            return [3 /*break*/, 4];
                        case 4:
                            if (!didReject) {
                                chaiFail(_chai, "Expected promise to reject but instead resolved with: " + resolveValue);
                            }
                            if (!compareRevertErrors.call(this, _chai, rejectValue, expected, true)) {
                                // Wasn't handled by the comparison function so call the previous handler.
                                _super.call.apply(_super, __spread([this, expected], rest));
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
    });
    proto.overwriteMethod('become', function (_super) {
        return function (expected) {
            var rest = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                rest[_i - 1] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var maybePromise, _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            maybePromise = this._obj;
                            // Make sure we're working with a promise.
                            assertIsPromiseLike(_chai, maybePromise);
                            _b = (_a = compareRevertErrors).call;
                            _c = [this, _chai];
                            return [4 /*yield*/, maybePromise];
                        case 1:
                            // Wait for the promise to resolve.
                            if (!_b.apply(_a, _c.concat([_d.sent(), expected]))) {
                                // Wasn't handled by the comparison function so call the previous handler.
                                _super.call.apply(_super, __spread([this, expected], rest));
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
    });
    proto.overwriteMethod('equal', function (_super) {
        return function (expected) {
            var rest = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                rest[_i - 1] = arguments[_i];
            }
            if (!compareRevertErrors.call(this, _chai, this._obj, expected)) {
                // Wasn't handled by the comparison function so call the previous handler.
                _super.call.apply(_super, __spread([this, expected], rest));
            }
        };
    });
}
exports.revertErrorHelper = revertErrorHelper;
/**
 * Compare two values as compatible RevertError types.
 * @return `true` if the comparison was fully evaluated. `false` indicates that
 *         it should be deferred to another handler.
 */
function compareRevertErrors(_chai, _actual, _expected, force) {
    var actual = _actual;
    var expected = _expected;
    // If either subject is a RevertError, or the `force` is `true`,
    // try to coerce the subjects into a RevertError.
    // Some of this is for convenience, some is for backwards-compatibility.
    if (force || expected instanceof utils_1.RevertError || actual instanceof utils_1.RevertError) {
        // `actual` can be a RevertError, string, or an Error type.
        if (!(actual instanceof utils_1.RevertError)) {
            if (typeof actual === 'string') {
                actual = new utils_1.StringRevertError(actual);
            }
            else if (actual instanceof Error) {
                actual = utils_1.coerceThrownErrorAsRevertError(actual);
            }
            else {
                chaiAssert(_chai, false, "Result is not of type RevertError: " + actual);
            }
        }
        // `expected` can be a RevertError or string.
        if (typeof expected === 'string') {
            expected = new utils_1.StringRevertError(expected);
        }
    }
    if (expected instanceof utils_1.RevertError && actual instanceof utils_1.RevertError) {
        // Check for equality.
        this.assert(expected.equals(actual), actual.toString() + " != " + expected.toString(), actual.toString() + " == " + expected.toString(), expected.toString(), actual.toString());
        // Return true to signal we handled it.
        return true;
    }
    return false;
}
function chaiAssert(_chai, condition, failMessage, expected, actual) {
    var assert = new _chai.Assertion();
    assert.assert(condition, failMessage, undefined, expected, actual);
}
function chaiFail(_chai, failMessage, expected, actual) {
    var assert = new _chai.Assertion();
    assert.assert(false, failMessage, undefined, expected, actual);
}
function assertIsPromiseLike(_chai, maybePromise) {
    if (maybePromise.then instanceof Function && maybePromise.catch instanceof Function) {
        return;
    }
    chaiFail(_chai, "Expected " + maybePromise + " to be a promise", Promise.resolve(), maybePromise);
}
//# sourceMappingURL=chai_revert_error.js.map