"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sol_compiler_1 = require("@0x/sol-compiler");
const path_1 = require("path");
const utils_1 = require("../utils");
const d = utils_1.debug('solc');
/**
 * Generate solidity artifacts for all of the solidity versions under a specified contract
 * directory.
 *
 * @param conf The application configuration, e.g. where to read solidity files, where to output, etc..
 */
async function compileAll(conf) {
    return Promise.all(utils_1.getContractDirs(conf).map(async ({ dir, version }) => {
        const c = compiler(conf, dir, version);
        // Compiler#getCompilerOutputsAsync throws on compilation errors
        // this method prints any errors and warnings for us
        await c.compileAsync();
    }));
}
exports.compileAll = compileAll;
/**
 * Create a sol-compiler instance that reads in a subdirectory of smart contracts e.g. (src/v0.4, src/v0.5, ..)
 * and outputs their respective compiler artifacts e.g. (abi/v0.4, abi/v0.5)
 *
 * @param config The application specific configuration to use for sol-compiler
 * @param subDir The subdirectory to use as a namespace when reading .sol files and outputting
 * their respective artifacts
 * @param solcVersion The solidity compiler version to use with sol-compiler
 */
function compiler({ artifactsDir, useDockerisedSolc, contractsDir }, subDir, solcVersion) {
    const _d = d.extend('compiler');
    const settings = {
        artifactsDir: path_1.join(artifactsDir, subDir),
        compilerSettings: {
            outputSelection: {
                '*': {
                    '*': [
                        'abi',
                        'devdoc',
                        'userdoc',
                        'evm.bytecode.object',
                        'evm.bytecode.sourceMap',
                        'evm.deployedBytecode.object',
                        'evm.deployedBytecode.sourceMap',
                        'evm.methodIdentifiers',
                        'metadata',
                    ],
                },
            },
        },
        contracts: '*',
        contractsDir: path_1.join(contractsDir, subDir),
        isOfflineMode: false,
        shouldSaveStandardInput: false,
        solcVersion,
        useDockerisedSolc,
    };
    _d('Settings: %o', settings);
    return new sol_compiler_1.Compiler(settings);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29sYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlcy9jb21waWxlcnMvc29sYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1EQUE0RDtBQUM1RCwrQkFBMkI7QUFFM0Isb0NBQWlEO0FBQ2pELE1BQU0sQ0FBQyxHQUFHLGFBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUV2Qjs7Ozs7R0FLRztBQUNJLEtBQUssVUFBVSxVQUFVLENBQUMsSUFBZ0I7SUFDL0MsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUNoQix1QkFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRTtRQUNuRCxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUV0QyxnRUFBZ0U7UUFDaEUsb0RBQW9EO1FBQ3BELE1BQU0sQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFBO0lBQ3hCLENBQUMsQ0FBQyxDQUNILENBQUE7QUFDSCxDQUFDO0FBVkQsZ0NBVUM7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILFNBQVMsUUFBUSxDQUNmLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLFlBQVksRUFBYyxFQUM3RCxNQUFjLEVBQ2QsV0FBbUI7SUFFbkIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUUvQixNQUFNLFFBQVEsR0FBb0I7UUFDaEMsWUFBWSxFQUFFLFdBQUksQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDO1FBQ3hDLGdCQUFnQixFQUFFO1lBQ2hCLGVBQWUsRUFBRTtnQkFDZixHQUFHLEVBQUU7b0JBQ0gsR0FBRyxFQUFFO3dCQUNILEtBQUs7d0JBQ0wsUUFBUTt3QkFDUixTQUFTO3dCQUNULHFCQUFxQjt3QkFDckIsd0JBQXdCO3dCQUN4Qiw2QkFBNkI7d0JBQzdCLGdDQUFnQzt3QkFDaEMsdUJBQXVCO3dCQUN2QixVQUFVO3FCQUNYO2lCQUNGO2FBQ0Y7U0FDRjtRQUNELFNBQVMsRUFBRSxHQUFHO1FBQ2QsWUFBWSxFQUFFLFdBQUksQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDO1FBQ3hDLGFBQWEsRUFBRSxLQUFLO1FBQ3BCLHVCQUF1QixFQUFFLEtBQUs7UUFDOUIsV0FBVztRQUNYLGlCQUFpQjtLQUNsQixDQUFBO0lBQ0QsRUFBRSxDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUU1QixPQUFPLElBQUksdUJBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUMvQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcGlsZXIsIENvbXBpbGVyT3B0aW9ucyB9IGZyb20gJ0AweC9zb2wtY29tcGlsZXInXG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCdcbmltcG9ydCAqIGFzIGNvbmZpZyBmcm9tICcuLi9jb25maWcnXG5pbXBvcnQgeyBkZWJ1ZywgZ2V0Q29udHJhY3REaXJzIH0gZnJvbSAnLi4vdXRpbHMnXG5jb25zdCBkID0gZGVidWcoJ3NvbGMnKVxuXG4vKipcbiAqIEdlbmVyYXRlIHNvbGlkaXR5IGFydGlmYWN0cyBmb3IgYWxsIG9mIHRoZSBzb2xpZGl0eSB2ZXJzaW9ucyB1bmRlciBhIHNwZWNpZmllZCBjb250cmFjdFxuICogZGlyZWN0b3J5LlxuICpcbiAqIEBwYXJhbSBjb25mIFRoZSBhcHBsaWNhdGlvbiBjb25maWd1cmF0aW9uLCBlLmcuIHdoZXJlIHRvIHJlYWQgc29saWRpdHkgZmlsZXMsIHdoZXJlIHRvIG91dHB1dCwgZXRjLi5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbXBpbGVBbGwoY29uZjogY29uZmlnLkFwcCkge1xuICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgZ2V0Q29udHJhY3REaXJzKGNvbmYpLm1hcChhc3luYyAoeyBkaXIsIHZlcnNpb24gfSkgPT4ge1xuICAgICAgY29uc3QgYyA9IGNvbXBpbGVyKGNvbmYsIGRpciwgdmVyc2lvbilcblxuICAgICAgLy8gQ29tcGlsZXIjZ2V0Q29tcGlsZXJPdXRwdXRzQXN5bmMgdGhyb3dzIG9uIGNvbXBpbGF0aW9uIGVycm9yc1xuICAgICAgLy8gdGhpcyBtZXRob2QgcHJpbnRzIGFueSBlcnJvcnMgYW5kIHdhcm5pbmdzIGZvciB1c1xuICAgICAgYXdhaXQgYy5jb21waWxlQXN5bmMoKVxuICAgIH0pLFxuICApXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgc29sLWNvbXBpbGVyIGluc3RhbmNlIHRoYXQgcmVhZHMgaW4gYSBzdWJkaXJlY3Rvcnkgb2Ygc21hcnQgY29udHJhY3RzIGUuZy4gKHNyYy92MC40LCBzcmMvdjAuNSwgLi4pXG4gKiBhbmQgb3V0cHV0cyB0aGVpciByZXNwZWN0aXZlIGNvbXBpbGVyIGFydGlmYWN0cyBlLmcuIChhYmkvdjAuNCwgYWJpL3YwLjUpXG4gKlxuICogQHBhcmFtIGNvbmZpZyBUaGUgYXBwbGljYXRpb24gc3BlY2lmaWMgY29uZmlndXJhdGlvbiB0byB1c2UgZm9yIHNvbC1jb21waWxlclxuICogQHBhcmFtIHN1YkRpciBUaGUgc3ViZGlyZWN0b3J5IHRvIHVzZSBhcyBhIG5hbWVzcGFjZSB3aGVuIHJlYWRpbmcgLnNvbCBmaWxlcyBhbmQgb3V0cHV0dGluZ1xuICogdGhlaXIgcmVzcGVjdGl2ZSBhcnRpZmFjdHNcbiAqIEBwYXJhbSBzb2xjVmVyc2lvbiBUaGUgc29saWRpdHkgY29tcGlsZXIgdmVyc2lvbiB0byB1c2Ugd2l0aCBzb2wtY29tcGlsZXJcbiAqL1xuZnVuY3Rpb24gY29tcGlsZXIoXG4gIHsgYXJ0aWZhY3RzRGlyLCB1c2VEb2NrZXJpc2VkU29sYywgY29udHJhY3RzRGlyIH06IGNvbmZpZy5BcHAsXG4gIHN1YkRpcjogc3RyaW5nLFxuICBzb2xjVmVyc2lvbjogc3RyaW5nLFxuKSB7XG4gIGNvbnN0IF9kID0gZC5leHRlbmQoJ2NvbXBpbGVyJylcblxuICBjb25zdCBzZXR0aW5nczogQ29tcGlsZXJPcHRpb25zID0ge1xuICAgIGFydGlmYWN0c0Rpcjogam9pbihhcnRpZmFjdHNEaXIsIHN1YkRpciksXG4gICAgY29tcGlsZXJTZXR0aW5nczoge1xuICAgICAgb3V0cHV0U2VsZWN0aW9uOiB7XG4gICAgICAgICcqJzoge1xuICAgICAgICAgICcqJzogW1xuICAgICAgICAgICAgJ2FiaScsXG4gICAgICAgICAgICAnZGV2ZG9jJyxcbiAgICAgICAgICAgICd1c2VyZG9jJyxcbiAgICAgICAgICAgICdldm0uYnl0ZWNvZGUub2JqZWN0JyxcbiAgICAgICAgICAgICdldm0uYnl0ZWNvZGUuc291cmNlTWFwJyxcbiAgICAgICAgICAgICdldm0uZGVwbG95ZWRCeXRlY29kZS5vYmplY3QnLFxuICAgICAgICAgICAgJ2V2bS5kZXBsb3llZEJ5dGVjb2RlLnNvdXJjZU1hcCcsXG4gICAgICAgICAgICAnZXZtLm1ldGhvZElkZW50aWZpZXJzJyxcbiAgICAgICAgICAgICdtZXRhZGF0YScsXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjb250cmFjdHM6ICcqJyxcbiAgICBjb250cmFjdHNEaXI6IGpvaW4oY29udHJhY3RzRGlyLCBzdWJEaXIpLFxuICAgIGlzT2ZmbGluZU1vZGU6IGZhbHNlLFxuICAgIHNob3VsZFNhdmVTdGFuZGFyZElucHV0OiBmYWxzZSxcbiAgICBzb2xjVmVyc2lvbixcbiAgICB1c2VEb2NrZXJpc2VkU29sYyxcbiAgfVxuICBfZCgnU2V0dGluZ3M6ICVvJywgc2V0dGluZ3MpXG5cbiAgcmV0dXJuIG5ldyBDb21waWxlcihzZXR0aW5ncylcbn1cbiJdfQ==